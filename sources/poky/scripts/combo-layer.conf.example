# combo-layer example configuration file

# component name
[bitbake]
# mandatory options
# git upstream uri
src_uri = git://git.openembedded.org/bitbake

# the directory to clone the component repo
local_repo_dir = /home/kyu3/src/test/bitbake

# the relative dir within the combo repo to put the component files
# use "." if the files should be in the root dir
dest_dir = bitbake

# the last update revision.
# "init" will set this to the latest revision automatically, however if it
# is empty when "update" is run, the tool will start from the first commit.
# Note that this value will get updated by "update" if the component repo's
# latest revision changed and the operation completes successfully.
last_revision =

# optional options:

# branch: specify the branch in the component repo to pull from
# (master if not specified)

# file_filter: only include the specified file(s)
# file_filter = [path] [path] ...
# example:
#   file_filter = src/  : only include the subdir src
#   file_filter = src/*.c : only include the src *.c file
#   file_filter = src/main.c src/Makefile.am : only include these two files

# hook: if provided, the tool will call the hook to process the generated
#     patch from upstream, and then apply the modified patch to the combo
#     repo.
# the hook script is called as follows: ./hook patchpath revision reponame
# example:
#     hook = combo-layer-hook-default.sh

[oe-core]
src_uri = git://git.openembedded.org/openembedded-core
local_repo_dir = /home/kyu3/src/test/oecore
dest_dir = .
last_revision =

# It is also possible to embed python code in the config values. Similar
# to bitbake it considers every value starting with @ to be a python
# script.
# e.g. local_repo_dir could easily be configured using an environment
# variable:
#
# [bitbake]
# local_repo_dir = @os.getenv("LOCAL_REPO_DIR") + "/bitbake"
#
