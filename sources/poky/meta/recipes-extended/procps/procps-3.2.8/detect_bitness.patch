Do not try to detect 64bit/32bit system
we already feed that information via compiler
defaults

Signed-off-by: Khem Raj <raj.khem@gmail.com>
Upstream-Status: Inappropriate [OE specific]
Index: procps-3.2.8/Makefile
===================================================================
--- procps-3.2.8.orig/Makefile	2014-05-03 01:00:01.707387583 -0700
+++ procps-3.2.8/Makefile	2014-05-03 08:53:08.087175369 -0700
@@ -118,15 +118,6 @@
 # until you go looking for a 64-bit curses library.
 check_gcc = $(shell if $(CC) $(ALL_CPPFLAGS) $(ALL_CFLAGS) dummy.c $(ALL_LDFLAGS) $(1) -o /dev/null $(CURSES) > /dev/null 2>&1; then echo "$(1)"; else echo "$(2)"; fi ;)
 
-# Be 64-bit if at all possible. In a cross-compiling situation, one may
-# do "make m64=-m32 lib64=lib" to produce 32-bit executables. DO NOT
-# attempt to use a 32-bit executable on a 64-bit kernel. Packagers MUST
-# produce separate executables for ppc and ppc64, s390 and s390x,
-# i386 and x86-64, mips and mips64, sparc and sparc64, and so on.
-# Failure to do so will cause data corruption.
-m64 := $(call check_gcc,-m64,$(call check_gcc,-mabi=64,))
-ALL_CFLAGS += $(m64)
-
 ALL_CFLAGS += $(call check_gcc,-Wdeclaration-after-statement,)
 ALL_CFLAGS += $(call check_gcc,-Wpadded,)
 ALL_CFLAGS += $(call check_gcc,-Wstrict-aliasing,)
